// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String  @id @default(cuid())
  name         String
  email        String  @unique
  password     String
  role         String
  image        String?
  is2FAEnabled Boolean @default(false)
  twoFASecret  String?

departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)

  approvalRoleId String?  
  approvalRole   ApprovalRole? @relation(fields: [approvalRoleId], references: [id], onDelete: SetNull)

  //tracking
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  loginAttempts Int       @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Documents {
  id          String   @id @default(cuid())
  referenceNo String   @unique
  itemType    String
  itemStatus  String
  purpose     String
  supplier    String
  oic         Boolean  @default(false)
  date        DateTime
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  approvalSteps ApprovalStep[]
}

model ApprovalRole {
  id       String  @id @default(cuid())
  name     String  @unique
  sequence Int     @unique  
  users    User[]
}

model ApprovalStep {
  id         String     @id @default(cuid())
  documentId String
  roleId     String
  userId     String?    
  status     String     @default("pending") // "pending", "approved", "rejected"
  approvedAt DateTime?

  document   Documents  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  role       ApprovalRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
}