// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Department {
  id   Int    @id @default(autoincrement())
  name String @unique

  users     User[]
  documents Documents[]
}

model User {
  id           String  @id @default(cuid())
  name         String
  email        String  @unique
  password     String
  role         String // "ADMIN" or "USER"
  image        String?
  is2FAEnabled Boolean @default(false)
  twoFASecret  String?

  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)

  approvalRoleId Int?
  approvalRole   ApprovalRole? @relation(fields: [approvalRoleId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  isActive      Boolean        @default(true)
  lastLogin     DateTime?
  loginAttempts Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  ApprovalStep  ApprovalStep[]
}

model Documents {
  id             String      @id @default(cuid())
  referenceNo    String      @unique
  documentType   String
  documentStatus String
  purpose        String
  supplier       String
  oic            Boolean     @default(false)
  date           DateTime
  departmentId   Int?
  department     Department? @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  approvalSteps ApprovalStep[]
}

model ApprovalRole {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  sequence     Int            @unique
  users        User[]
  ApprovalStep ApprovalStep[]
}

model ApprovalStep {
  id         String    @id @default(cuid())
  documentId String
  roleId     Int
  userId     String?
  status     String    @default("pending") // "pending", "approved", "rejected"
  approvedAt DateTime?

  document Documents    @relation(fields: [documentId], references: [id], onDelete: Cascade)
  role     ApprovalRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user     User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
}
